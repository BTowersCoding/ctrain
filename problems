[{:_id 1 :title "Nothing but the Truth"
    :tests ["(= __ true)"],
    :description "Complete the expression so it will evaluate to true."}
 
  {:_id 2 :title "Simple Math"
   :tests ["(= (- 10 (* 2 3)) __)"]
   :description "Innermost forms are evaluated first."}

  {:_id 3 :title "Strings"
   :tests ["(= __ (.toUpperCase \"eat me\"))"]
   :description "Clojure strings are Java strings, so you can use Java string methods on them."}

  {:_id 4 :title "Lists"
   :tests ["(= (list __) '(:a :b :c))"]
   :description "Lists can be constructed with either a function or a quoted form."}

  {:_id 5 :title "conj on lists"
   :tests ["(= __ (conj '(2 3 4) 1))" "(= __ (conj '(3 4) 2 1))"]
   :description "When operating on a list, the conj function will return a new list with one or more items \"added\" to the front."}

  {:_id 6 :title "Vectors"
   :tests ["(= [__] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))"]
   :description "Vectors can be constructed several ways.  You can compare them with lists."}

  {:_id 7 :title "conj on vectors"
   :tests ["(= __ (conj [1 2 3] 4))" "(= __ (conj [1 2] 3 4))"]
   :description "When operating on a Vector, the conj function will return a new vector with one or more items \"added\" to the end."}

  {:_id 8 :title "Sets"
   :tests ["(= __ (set '(:a :a :b :c :c :c :c :d :d)))" "(= __ (clojure.set/union #{:a :b :c} #{:b :c :d}))"]
   :description "Sets are collections of unique values."}

{:_id 9 :title "conj on sets"
 :tests ["(= #{1 2 3 4} (conj #{1 4 3} __))"]
 :description "When operating on a set, the conj function returns a new set with one or more keys \"added\"."}

{:_id 10 :title "Maps"
 :tests ["(= __ ((hash-map :a 10, :b 20, :c 30) :b))" "(= __ (:b {:a 10, :b 20, :c 30}))"]
 :description "Maps store key-value pairs.  Both maps and keywords can be used as lookup functions. Commas are whitespace."}

{:_id 11 :title "conj on maps"
 :tests ["(= {:a 1, :b 2, :c 3} (conj {:a 1} __ [:c 3]))"]
 :description "When operating on a map, the conj function returns a new map with one or more key-value pairs \"added\"."}

{:_id 12 :title "Sequences"
 :tests ["(= __ (first '(3 2 1)))" "(= __ (second [2 3 4]))" "(= __ (last (list 1 2 3)))"],
 :description "All Clojure collections support sequencing.  You can operate on sequences with functions like first, second, and last."}

{:_id 13 :title "rest"
 :tests ["(= __ (rest [10 20 30 40]))"]
 :description "The rest function will return all the items of a sequence except the first."}

{:_id 14 :title "Functions"
 :tests ["(= __ ((fn add-five [x] (+ x 5)) 3))" "(= __ ((fn [x] (+ x 5)) 3))" "(= __ (#(+ % 5) 3))" "(= __ ((partial + 5) 3))"]
 :description "Clojure has many different ways to create functions."}

{:_id 15 :title "Double Down"
 :tests ["(= (__ 2) 4)" "(= (__ 3) 6)" "(= (__ 11) 22)" "(= (__ 7) 14)"]
 :description "Write a function which doubles a number."}

{:_id 16 :title "What Up"
 :tests ["(= (__ \"Dave\") \"What up, Dave!\")" "(= (__ \"Jenn\") \"What up, Jenn!\")" "(= (__ \"Rhea\") \"What up, Rhea!\")"]
 :description "Write a function which returns a personalized greeting."}

{:_id 17 :title "map"
 :tests ["(= __ (map #(+ % 5) '(1 2 3)))"]
 :description "The map function takes two arguments: a function (f) and a sequence (s).
              Map returns a new sequence consisting of the result of applying f to each item of s.
              Do not confuse the map function with the map data structure."}

{:_id 18 :title "filter"
 :tests ["(= __ (filter #(> % 5) '(3 4 5 6 7)))"]
 :description "The filter function takes two arguments: a predicate function (f) and a sequence (s).
              Filter returns a new sequence consisting of all the items of s for which (f item) returns true."}

{:_id 19 :restricted ["last"], :title "Last Element"
 :tests ["(= (__ [1 2 3 4 5]) 5)" "(= (__ '(5 4 3)) 3)" "(= (__ [\"b\" \"c\" \"d\"]) \"d\")"]
:description "Write a function which returns the last element in a sequence."}

{:_id 20 :title "Penultimate Element"
:tests ["(= (__ (list 1 2 3 4 5)) 4)" "(= (__ [\"a\" \"b\" \"c\"]) \"b\")" "(= (__ [[1 2] [3 4]]) [1 2])"]
:description "Write a function which returns the second to last element from a sequence."}

{:_id 21 :restricted ["nth"], :title "Nth Element"
:tests ["(= (__ '(4 5 6 7) 2) 6)" "(= (__ [:a :b :c] 0) :a)" "(= (__ [1 2 3 4] 1) 2)" "(= (__ '([1 2] [3 4] [5 6]) 2) [5 6])"]
:description "Write a function which returns the Nth element from a sequence."}

{:_id 22 :restricted ["count"], :title "Count a Sequence" :tests ["(= (__ '(1 2 3 3 1)) 5)" "(= (__ \"Hello World\") 11)" "(= (__ [[1 2] [3 4] [5 6]]) 3)" "(= (__ '(13)) 1)" "(= (__ '(:a :b :c)) 3)"], :description "Write a function which returns the total number of elements in a sequence.", :tags ["easy" "seqs" "core-functions"]}

{:_id 23 :restricted ["reverse"], :title "Reverse a Sequence" :tests ["(= (__ [1 2 3 4 5]) [5 4 3 2 1])" "(= (__ (sorted-set 5 7 2 7)) '(7 5 2))" "(= (__ [[1 2][3 4][5 6]]) [[5 6][3 4][1 2]])"], :description "Write a function which reverses a sequence.", :tags ["easy" "seqs" "core-functions"]}

{:_id 24 :title "Sum It All Up" :tests ["(= (__ [1 2 3]) 6)" "(= (__ (list 0 -2 5 5)) 8)" "(= (__ #{4 2 1}) 7)" "(= (__ '(0 0 -1)) -1)" "(= (__ '(1 10 3)) 14)"], :description "Write a function which returns the sum of a sequence of numbers.", :tags ["easy" "seqs"]}

{:_id 25 :title "Find the odd numbers" :tests ["(= (__ #{1 2 3 4 5}) '(1 3 5))" "(= (__ [4 2 1 6]) '(1))" "(= (__ [2 2 4 6]) '())" "(= (__ [1 1 1 3]) '(1 1 1 3))"], :description "Write a function which returns only the odd numbers from a sequence.", :tags ["easy" "seqs"]}

{:_id 26 :title "Fibonacci Sequence" :tests ["(= (__ 3) '(1 1 2))" "(= (__ 6) '(1 1 2 3 5 8))" "(= (__ 8) '(1 1 2 3 5 8 13 21))"], :description "Write a function which returns the first X fibonacci numbers.", :tags ["easy" "Fibonacci" "seqs"]}

{:_id 27 :title "Palindrome Detector" :tests ["(false? (__ '(1 2 3 4 5)))" "(true? (__ \"racecar\"))" "(true? (__ [:foo :bar :foo]))" "(true? (__ '(1 1 3 3 1 1)))" "(false? (__ '(:a :b :c)))"], :description "Write a function which returns true if the given sequence is a palindrome.<br/><br>\n                Hint: \"racecar\" does not equal '(\\r \\a \\c \\e \\c \\a \\r)", :tags ["easy" "seqs"]}

{:_id 28 :restricted ["flatten"], :title "Flatten a Sequence" :tests ["(= (__ '((1 2) 3 [4 [5 6]])) '(1 2 3 4 5 6))" "(= (__ [\"a\" [\"b\"] \"c\"]) '(\"a\" \"b\" \"c\"))" "(= (__ '((((:a))))) '(:a))"], :description "Write a function which flattens a sequence.", :tags ["easy" "seqs" "core-functions"]}

{:_id 29 :title "Get the Caps" :tests ["(= (__ \"HeLlO, WoRlD!\") \"HLOWRD\")" "(empty? (__ \"nothing\"))" "(= (__ \"$#A(*&987Zf\") \"AZ\")"], :description "Write a function which takes a string and returns a new string containing only the capital letters.", :tags ["easy" "strings"]}

{:_id 30 :title "Compress a Sequence" :tests ["(= (apply str (__ \"Leeeeeerrroyyy\")) \"Leroy\")" "(= (__ [1 1 2 3 3 2 2 3]) '(1 2 3 2 3))" "(= (__ [[1 2] [1 2] [3 4] [1 2]]) '([1 2] [3 4] [1 2]))"], :description "Write a function which removes consecutive duplicates from a sequence.", :tags ["easy" "seqs"]}

{:_id 31 :title "Pack a Sequence" :tests ["(= (__ [1 1 2 1 1 1 3 3]) '((1 1) (2) (1 1 1) (3 3)))" "(= (__ [:a :a :b :b :c]) '((:a :a) (:b :b) (:c)))" "(= (__ [[1 2] [1 2] [3 4]]) '(([1 2] [1 2]) ([3 4])))"], :description "Write a function which packs consecutive duplicates into sub-lists.", :tags ["easy" "seqs"]}

{:_id 32 :title "Duplicate a Sequence" :tests ["(= (__ [1 2 3]) '(1 1 2 2 3 3))" "(= (__ [:a :a :b :b]) '(:a :a :a :a :b :b :b :b))" "(= (__ [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4]))" "(= (__ [44 33]) [44 44 33 33])"], :description "Write a function which duplicates each element of a sequence.", :tags ["easy" "seqs"]}

{:_id 33 :title "Replicate a Sequence" :tests ["(= (__ [1 2 3] 2) '(1 1 2 2 3 3))" "(= (__ [:a :b] 4) '(:a :a :a :a :b :b :b :b))" "(= (__ [4 5 6] 1) '(4 5 6))" "(= (__ [[1 2] [3 4]] 2) '([1 2] [1 2] [3 4] [3 4]))" "(= (__ [44 33] 2) [44 44 33 33])"], :description "Write a function which replicates each element of a sequence a variable number of times.", :tags ["easy" "seqs"]}

{:_id 34 :restricted ["range"], :title "Implement range" :tests ["(= (__ 1 4) '(1 2 3))" "(= (__ -2 2) '(-2 -1 0 1))" "(= (__ 5 8) '(5 6 7))"], :description "Write a function which creates a list of all integers in a given range.", :tags ["easy" "seqs" "core-functions"]}

{:_id 35 :title "Local bindings" :tests ["(= __ (let [x 5] (+ 2 x)))" "(= __ (let [x 3, y 10] (- y x)))" "(= __ (let [x 21] (let [y 3] (/ x y))))"], :description "Clojure lets you give local names to values using the special let-form.", :tags ["elementary" "syntax"]}

{:_id 36 :title "Let it Be" :tests ["(= 10 (let __ (+ x y)))" "(= 4 (let __ (+ y z)))" "(= 1 (let __ z))"], :description "Can you bind x, y, and z so that these are all true?", :tags ["elementary" "math" "syntax"]}

{:_id 37 :title "Regular Expressions" :tests ["(= __ (apply str (re-seq #\"[A-Z]+\" \"bA1B3Ce \")))"], :description "Regex patterns are supported with a special reader macro.", :tags ["elementary" "regex" "syntax"]}

{:_id 38 :restricted ["max" "max-key"], :title "Maximum value" :tests ["(= (__ 1 8 3 4) 8)" "(= (__ 30 20) 30)" "(= (__ 45 67 11) 67)"], :description "Write a function which takes a variable number of parameters and returns the maximum value.", :tags ["easy" "core-functions"]}

{:_id 39 :restricted ["interleave"], :title "Interleave Two Seqs" :tests ["(= (__ [1 2 3] [:a :b :c]) '(1 :a 2 :b 3 :c))" "(= (__ [1 2] [3 4 5 6]) '(1 3 2 4))" "(= (__ [1 2 3 4] [5]) [1 5])" "(= (__ [30 20] [25 15]) [30 25 20 15])"], :description "Write a function which takes two sequences and returns the first item from each, then the second item from each, then the third, etc.", :tags ["easy" "seqs" "core-functions"]}

{:_id 40 :restricted ["interpose"], :title "Interpose a Seq" :tests ["(= (__ 0 [1 2 3]) [1 0 2 0 3])" "(= (apply str (__ \", \" [\"one\" \"two\" \"three\"])) \"one, two, three\")" "(= (__ :z [:a :b :c :d]) [:a :z :b :z :c :z :d])"], :description "Write a function which separates the items of a sequence by an arbitrary value.", :tags ["easy" "seqs" "core-functions"]}

{:_id 41 :title "Drop Every Nth Item" :tests ["(= (__ [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8])" "(= (__ [:a :b :c :d :e :f] 2) [:a :c :e])" "(= (__ [1 2 3 4 5 6] 4) [1 2 3 5 6])"], :description "Write a function which drops every Nth item from a sequence.", :tags ["easy" "seqs"]}

{:_id 42 :title "Factorial Fun" :tests ["(= (__ 1) 1)" "(= (__ 3) 6)" "(= (__ 5) 120)" "(= (__ 8) 40320)"], :description "Write a function which calculates factorials.", :tags ["easy" "math"]}

{:_id 43 :title "Reverse Interleave" :tests ["(= (__ [1 2 3 4 5 6] 2) '((1 3 5) (2 4 6)))" "(= (__ (range 9) 3) '((0 3 6) (1 4 7) (2 5 8)))" "(= (__ (range 10) 5) '((0 5) (1 6) (2 7) (3 8) (4 9)))"], :description "Write a function which reverses the interleave process into x number of subsequences.", :tags ["medium" "seqs"]}

{:_id 44 :title "Rotate Sequence" :tests ["(= (__ 2 [1 2 3 4 5]) '(3 4 5 1 2))" "(= (__ -2 [1 2 3 4 5]) '(4 5 1 2 3))" "(= (__ 6 [1 2 3 4 5]) '(2 3 4 5 1))" "(= (__ 1 '(:a :b :c)) '(:b :c :a))" "(= (__ -4 '(:a :b :c)) '(:c :a :b))"], :description "Write a function which can rotate a sequence in either direction.", :tags ["medium" "seqs"]}

{:_id 45 :title "Intro to Iterate" :tests ["(= __ (take 5 (iterate #(+ 3 %) 1)))"], :description "The iterate function can be used to produce an infinite lazy sequence.", :tags ["easy" "seqs"]}

{:_id 46 :title "Flipping out" :tests ["(= 3 ((__ nth) 2 [1 2 3 4 5]))" "(= true ((__ >) 7 8))" "(= 4 ((__ quot) 2 8))" "(= [1 2 3] ((__ take) [1 2 3 4 5] 3))"], :description "Write a higher-order function which flips the order of the arguments of an input function.", :tags ["medium" "higher-order-functions"]}

{:_id 47 :title "Contain Yourself" :tests ["(contains? #{4 5 6} __)" "(contains? [1 1 1 1 1] __)" "(contains? {4 :a 2 :b} __)" "(not (contains? [1 2 4] __))"], :description "The contains? function checks if a KEY is present in a given collection.  This often leads beginner clojurians to use it incorrectly with numerically indexed collections like vectors and lists.", :tags ["easy"]}

{:_id 48 :title "Intro to some" :tests ["(= __ (some #{2 7 6} [5 6 7 8]))" "(= __ (some #(when (even? %) %) [5 6 7 8]))"], :description "The some function takes a predicate function and a collection.  It returns the first logical true value of (predicate x) where x is an item in the collection.", :tags ["easy"]}

{:_id 49 :restricted ["split-at"], :title "Split a sequence" :tests ["(= (__ 3 [1 2 3 4 5 6]) [[1 2 3] [4 5 6]])" "(= (__ 1 [:a :b :c :d]) [[:a] [:b :c :d]])" "(= (__ 2 [[1 2] [3 4] [5 6]]) [[[1 2] [3 4]] [[5 6]]])"], :description "Write a function which will split a sequence into two parts.", :tags ["easy" "seqs" "core-functions"]}

{:_id 50 :title "Split by Type" :tests ["(= (set (__ [1 :a 2 :b 3 :c])) #{[1 2 3] [:a :b :c]})" "(= (set (__ [:a \"foo\"  \"bar\" :b])) #{[:a :b] [\"foo\" \"bar\"]})" "(= (set (__ [[1 2] :a [3 4] 5 6 :b])) #{[[1 2] [3 4]] [:a :b] [5 6]})"], :description "Write a function which takes a sequence consisting of items with different types and splits them up into a set of homogeneous sub-sequences. The internal order of each sub-sequence should be maintained, but the sub-sequences themselves can be returned in any order (this is why 'set' is used in the test cases).", :tags ["medium" "seqs"]}

{:_id 51 :title "Advanced Destructuring" :tests ["(= [1 2 [3 4 5] [1 2 3 4 5]] (let [[a b & c :as d] __] [a b c d]))"], :description "Here is an example of some more sophisticated destructuring.", :tags ["easy" "destructuring"]}

{:_id 52 :title "Intro to Destructuring" :tests ["(= [2 4] (let [[a b c d e f g] (range)] __))"], :description "Let bindings and function parameter lists support destructuring.", :tags ["easy" "destructuring"]}

{:_id 53 :title "Longest Increasing Sub-Seq" :tests ["(= (__ [1 0 1 2 3 0 4 5]) [0 1 2 3])" "(= (__ [5 6 1 3 2 7]) [5 6])" "(= (__ [2 3 3 4 5]) [3 4 5])" "(= (__ [7 6 5 4]) [])"], :description "Given a vector of integers, find the longest consecutive sub-sequence of increasing numbers. If two sub-sequences have the same length, use the one that occurs first. An increasing sub-sequence must have a length of 2 or greater to qualify.", :tags ["hard" "seqs"]}

{:_id 54 :restricted ["partition" "partition-all"], :title "Partition a Sequence" :tests ["(= (__ 3 (range 9)) '((0 1 2) (3 4 5) (6 7 8)))" "(= (__ 2 (range 8)) '((0 1) (2 3) (4 5) (6 7)))" "(= (__ 3 (range 8)) '((0 1 2) (3 4 5)))"], :description "Write a function which returns a sequence of lists of x items each.  Lists of less than x items should not be returned.", :tags ["medium" "seqs" "core-functions"]}

{:_id 55 :restricted ["frequencies"], :title "Count Occurences" :tests ["(= (__ [1 1 2 3 2 1 1]) {1 4, 2 2, 3 1})" "(= (__ [:b :a :b :a :b]) {:a 2, :b 3})" "(= (__ '([1 2] [1 3] [1 3])) {[1 2] 1, [1 3] 2})"], :description "Write a function which returns a map containing the number of occurences of each distinct item in a sequence.", :tags ["medium" "seqs" "core-functions"]}

{:_id 56 :restricted ["distinct"], :title "Find Distinct Items" :tests ["(= (__ [1 2 1 3 1 2 4]) [1 2 3 4])" "(= (__ [:a :a :b :b :c :c]) [:a :b :c])" "(= (__ '([2 4] [1 2] [1 3] [1 3])) '([2 4] [1 2] [1 3]))" "(= (__ (range 50)) (range 50))"], :description "Write a function which removes the duplicates from a sequence. Order of the items must be maintained.", :tags ["medium" "seqs" "core-functions"]}

{:_id 57 :title "Simple Recursion" :tests ["(= __ ((fn foo [x] (when (> x 0) (conj (foo (dec x)) x))) 5))"], :description "A recursive function is a function which calls itself.  This is one of the fundamental techniques used in functional programming.", :tags ["elementary" "recursion"]}

{:_id 58 :restricted ["comp"], :title "Function Composition" :tests ["(= [3 2 1] ((__ rest reverse) [1 2 3 4]))" "(= 5 ((__ (partial + 3) second) [1 2 3 4]))" "(= true ((__ zero? #(mod % 8) +) 3 5 7 9))" "(= \"HELLO\" ((__ #(.toUpperCase %) #(apply str %) take) 5 \"hello world\"))"], :description "Write a function which allows you to create function compositions.  The parameter list should take a variable number of functions, and create a function applies them from right-to-left.", :tags ["medium" "higher-order-functions" "core-functions"]}

{:_id 59 :restricted ["juxt"], :title "Juxtaposition" :tests ["(= [21 6 1] ((__ + max min) 2 3 5 1 6 4))" "(= [\"HELLO\" 5] ((__ #(.toUpperCase %) count) \"hello\"))" "(= [2 6 4] ((__ :a :c :b) {:a 2, :b 4, :c 6, :d 8 :e 10}))"], :description "Take a set of functions and return a new function that takes a variable number of arguments and returns a sequence containing the result of applying each function left-to-right to the argument list.", :tags ["medium" "higher-order-functions" "core-functions"]}

{:_id 66 :title "Greatest Common Divisor" :tests ["(= (__ 2 4) 2)" "(= (__ 10 5) 5)" "(= (__ 5 7) 1)" "(= (__ 1023 858) 33)"], :description "Given two integers, write a function which\nreturns the greatest common divisor.", :tags ["easy"]}

{:_id 60 :restricted ["reductions"], :title "Sequence Reductions" :tests ["(= (take 5 (__ + (range))) [0 1 3 6 10])" "(= (__ conj [1] [2 3 4]) [[1] [1 2] [1 2 3] [1 2 3 4]])" "(= (last (__ * 2 [3 4 5])) (reduce * 2 [3 4 5]) 120)"], :description "Write a function which behaves like reduce, but returns each intermediate value of the reduction.  Your function must accept either two or three arguments, and the return sequence must be lazy.", :tags ["medium" "seqs" "core-functions"]}

{:_id 61 :restricted ["zipmap"], :title "Map Construction" :tests ["(= (__ [:a :b :c] [1 2 3]) {:a 1, :b 2, :c 3})" "(= (__ [1 2 3 4] [\"one\" \"two\" \"three\"]) {1 \"one\", 2 \"two\", 3 \"three\"})" "(= (__ [:foo :bar] [\"foo\" \"bar\" \"baz\"]) {:foo \"foo\", :bar \"bar\"})"], :description "Write a function which takes a vector of keys and a vector of values and constructs a map from them.", :tags ["easy" "core-functions"]}

{:_id 62 :restricted ["iterate"], :title "Re-implement Iteration" :tests ["(= (take 5 (__ #(* 2 %) 1)) [1 2 4 8 16])" "(= (take 100 (__ inc 0)) (take 100 (range)))" "(= (take 9 (__ #(inc (mod % 3)) 1)) (take 9 (cycle [1 2 3])))"], :description "Given a side-effect free function f and an initial value x write a function which returns an infinite lazy sequence of x, (f x), (f (f x)), (f (f (f x))), etc.", :tags ["easy" "seqs" "core-functions"]}

{:_id 63 :restricted ["group-by"], :title "Group a Sequence" :tests ["(= (__ #(> % 5) #{1 3 6 8}) {false [1 3], true [6 8]})" "(= (__ #(apply / %) [[1 2] [2 4] [4 6] [3 6]])\n   {1/2 [[1 2] [2 4] [3 6]], 2/3 [[4 6]]})" "(= (__ count [[1] [1 2] [3] [1 2 3] [2 3]])\n   {1 [[1] [3]], 2 [[1 2] [2 3]], 3 [[1 2 3]]})"], :description "Given a function f and a sequence s, write a function which returns a map.  The keys should be the values of f applied to each item in s.  The value at each key should be a vector of corresponding items in the order they appear in s.", :tags ["medium" "seqs" "core-functions"]}

{:_id 64 :title "Intro to Reduce" :tests ["(= 15 (reduce __ [1 2 3 4 5]))" "(=  0 (reduce __ []))" "(=  6 (reduce __ 1 [2 3]))"], :description "<a href='http://clojuredocs.org/clojure_core/clojure.core/reduce'>Reduce</a> takes a 2 argument function and an optional starting value. It then applies the function to the first 2 items in the sequence (or the starting value and the first element of the sequence). In the next iteration the function will be called on the previous return value and the next item from the sequence, thus reducing the entire collection to one value. Don't worry, it's not as complicated as it sounds.", :tags ["elementary" "seqs"]}

{:_id 65, :title "Black Box Testing" :description "Clojure has many collection types, which act in subtly different ways. The core functions typically convert them into a uniform \"sequence\" type and work with them that way, but it can be important to understand the behavioral and performance differences so that you know which kind is appropriate for your application.<br /><br />Write a function which takes a collection and returns one of :map, :set, :list, or :vector - describing the type of collection it was given.<br />You won't be allowed to inspect their class or use the built-in predicates like list? - the point is to poke at them and understand their behavior.", :tags ["hard" "seqs" "testing"] :tests ["(= :map (__ {:a 1, :b 2}))" "(= :list (__ (range (rand-int 20))))" "(= :vector (__ [1 2 3 4 5 6]))" "(= :set (__ #{10 (rand-int 5)}))" "(= [:map :set :vector :list] (map __ [{} #{} [] ()]))"], :restricted ["class" "type" "Class" "vector?" "sequential?" "list?" "seq?" "map?" "set?" "instance?" "getClass"]}

{:_id 67 :title "Prime Numbers" :tests ["(= (__ 2) [2 3])" "(= (__ 5) [2 3 5 7 11])" "(= (last (__ 100)) 541)"], :description "Write a function which returns the first x\nnumber of prime numbers.", :tags ["medium" "primes"]}

{:_id 68 :title "Recurring Theme" :tests ["(= __\n  (loop [x 5\n         result []]\n    (if (> x 0)\n      (recur (dec x) (conj result (+ 2 x)))\n      result)))"], :description "Clojure only has one non-stack-consuming looping construct: recur.  Either a function or a loop can be used as the recursion point.  Either way, recur rebinds the bindings of the recursion point to the values it is passed.  Recur must be called from the tail-position, and calling it elsewhere will result in an error.", :tags ["elementary" "recursion"]}

{:_id 69 :restricted ["merge-with"], :title "Merge with a Function" :tests ["(= (__ * {:a 2, :b 3, :c 4} {:a 2} {:b 2} {:c 5})\n   {:a 4, :b 6, :c 20})" "(= (__ - {1 10, 2 20} {1 3, 2 10, 3 15})\n   {1 7, 2 10, 3 15})" "(= (__ concat {:a [3], :b [6]} {:a [4 5], :c [8 9]} {:b [7]})\n   {:a [3 4 5], :b [6 7], :c [8 9]})"], :description "Write a function which takes a function f and a variable number of maps.  Your function should return a map that consists of the rest of the maps conj-ed onto the first.  If a key occurs in more than one map, the mapping(s) from the latter (left-to-right) should be combined with the mapping in the result by calling (f val-in-result val-in-latter)", :tags ["medium" "core-functions"]}

{:_id 70 :title "Word Sorting" :tests ["(= (__  \"Have a nice day.\")\n   [\"a\" \"day\" \"Have\" \"nice\"])" "(= (__  \"Clojure is a fun language!\")\n   [\"a\" \"Clojure\" \"fun\" \"is\" \"language\"])" "(= (__  \"Fools fall for foolish follies.\")\n   [\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"])"], :description "Write a function which splits a sentence up into a sorted list of words.  Capitalization should not affect sort order and punctuation should be ignored.", :tags ["medium" "sorting"]}

{:_id 71 :title "Rearranging Code: ->" :tests ["(= (__ (sort (rest (reverse [2 5 4 1 3 6]))))\n   (-> [2 5 4 1 3 6] reverse rest sort __)\n   5)"], :description "The -> macro threads an expression x through a variable number of forms. First, x is inserted as the second item in the first form, making a list of it if it is not a list already.  Then the first form is inserted as the second item in the second form, making a list of that form if necessary.  This process continues for all the forms.  Using -> can sometimes make your code more readable.", :tags ["elementary"]}

{:_id 72 :title "Rearranging Code: ->>" :tests ["(= (__ (map inc (take 3 (drop 2 [2 5 4 1 3 6]))))\n   (->> [2 5 4 1 3 6] (drop 2) (take 3) (map inc) (__))\n   11)"], :description "The ->> macro threads an expression x through a variable number of forms. First, x is inserted as the last item in the first form, making a list of it if it is not a list already.  Then the first form is inserted as the last item in the second form, making a list of that form if necessary.  This process continues for all the forms.  Using ->> can sometimes make your code more readable.", :tags ["elementary"]}

{:_id 73 :title "Analyze a Tic-Tac-Toe Board" :tests ["(= nil (__ [[:e :e :e]\n            [:e :e :e]\n            [:e :e :e]]))" "(= :x (__ [[:x :e :o]\n           [:x :e :e]\n           [:x :e :o]]))" "(= :o (__ [[:e :x :e]\n           [:o :o :o]\n           [:x :e :x]]))" "(= nil (__ [[:x :e :o]\n            [:x :x :e]\n            [:o :x :o]]))" "(= :x (__ [[:x :e :e]\n           [:o :x :e]\n           [:o :e :x]]))" "(= :o (__ [[:x :e :o]\n           [:x :o :e]\n           [:o :e :x]]))" "(= nil (__ [[:x :o :x]\n            [:x :o :x]\n            [:o :x :o]]))"], :description "A <a href=\"http://en.wikipedia.org/wiki/Tic-tac-toe\">tic-tac-toe</a> board is represented by a two dimensional vector. X is represented by :x, O is represented by :o, and empty is represented by :e.  A player wins by placing three Xs or three Os in a horizontal, vertical, or diagonal row.  Write a function which analyzes a tic-tac-toe board and returns :x if X has won, :o if O has won, and nil if neither player has won.", :tags ["medium" "game"]}

{:_id 74 :title "Filter Perfect Squares" :tests ["(= (__ \"4,5,6,7,8,9\") \"4,9\")" "(= (__ \"15,16,25,36,37\") \"16,25,36\")"], :description "Given a string of comma separated integers, write a function which returns a new comma separated string that only contains the numbers which are perfect squares.", :tags ["medium"]}

{:_id 75 :title "Euler's Totient Function" :tests ["(= (__ 1) 1)" "(= (__ 10) (count '(1 3 7 9)) 4)" "(= (__ 40) 16)" "(= (__ 99) 60)"], :description "Two numbers are coprime if their greatest common divisor equals 1.  Euler's totient function f(x) is defined as the number of positive integers less than x which are coprime to x.  The special case f(1) equals 1.  Write a function which calculates Euler's totient function.", :tags ["medium"]}

{:_id 76 :title "Intro to Trampoline" :tests ["(= __\n   (letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     (trampoline foo [] 1)))"], :description "The trampoline function takes a function f and a variable number of parameters.  Trampoline calls f with any parameters that were supplied.  If f returns a function, trampoline calls that function with no arguments.  This is repeated, until the return value is not a function, and then trampoline returns that non-function value.  This is useful for implementing mutually recursive algorithms in a way that won't consume the stack.", :tags ["medium" "recursion"]}

{:_id 77 :title "Anagram Finder" :tests ["(= (__ [\"meat\" \"mat\" \"team\" \"mate\" \"eat\"])\n   #{#{\"meat\" \"team\" \"mate\"}})" "(= (__ [\"veer\" \"lake\" \"item\" \"kale\" \"mite\" \"ever\"])\n   #{#{\"veer\" \"ever\"} #{\"lake\" \"kale\"} #{\"mite\" \"item\"}})"], :description "Write a function which finds all the anagrams in a vector of words.  A word x is an anagram of word y if all the letters in x can be rearranged in a different order to form y.  Your function should return a set of sets, where each sub-set is a group of words which are anagrams of each other.  Each sub-set should have at least two words.  Words without any anagrams should not be included in the result.", :tags ["medium"]}

{:_id 78 :restricted ["trampoline"], :title "Reimplement Trampoline" :tests ["(= (letfn [(triple [x] #(sub-two (* 3 x)))\n          (sub-two [x] #(stop?(- x 2)))\n          (stop? [x] (if (> x 50) x #(triple x)))]\n    (__ triple 2))\n  82)" "(= (letfn [(my-even? [x] (if (zero? x) true #(my-odd? (dec x))))\n          (my-odd? [x] (if (zero? x) false #(my-even? (dec x))))]\n    (map (partial __ my-even?) (range 6)))\n  [true false true false true false])"], :description "Reimplement the function described in <a href=\"76\"> \"Intro to Trampoline\"</a>.", :tags ["medium" "core-functions"]}

{:_id 79 :title "Triangle Minimal Path" :tests ["(= (__ [   [1]\n          [2 4]\n         [5 1 4]\n        [2 3 4 5]])\n   (+ 1 2 1 3)\n   7)" "(= (__ [     [3]\n            [2 4]\n           [1 9 3]\n          [9 9 2 4]\n         [4 6 6 7 8]\n        [5 7 3 5 1 4]])\n   (+ 3 4 3 2 7 1)\n   20)"], :description "Write a function which calculates the sum of the minimal path through a triangle.  The triangle is represented as a vector of vectors.  The path should start at the top of the triangle and move to an adjacent number on the next row until the bottom of the triangle is reached.", :tags ["hard"]}

{:_id 80 :title "Perfect Numbers" :tests ["(= (__ 6) true)" "(= (__ 7) false)" "(= (__ 496) true)" "(= (__ 500) false)" "(= (__ 8128) true)"], :description "A number is \"perfect\" if the sum of its divisors equal the number itself.  6 is a perfect number because 1+2+3=6.  Write a function which returns true for perfect numbers and false otherwise.", :tags ["medium"]}

{:_id 81 :restricted ["intersection"], :title "Set Intersection" :tests ["(= (__ #{0 1 2 3} #{2 3 4 5}) #{2 3})" "(= (__ #{0 1 2} #{3 4 5}) #{})" "(= (__ #{:a :b :c :d} #{:c :e :a :f :d}) #{:a :c :d})"], :description "Write a function which returns the intersection of two sets.  The intersection is the sub-set of items that each set has in common.", :tags ["easy" "set-theory"]}

{:_id 82 :title "Word Chains" :tests ["(= true (__ #{\"hat\" \"coat\" \"dog\" \"cat\" \"oat\" \"cot\" \"hot\" \"hog\"}))" "(= false (__ #{\"cot\" \"hot\" \"bat\" \"fat\"}))" "(= false (__ #{\"to\" \"top\" \"stop\" \"tops\" \"toss\"}))" "(= true (__ #{\"spout\" \"do\" \"pot\" \"pout\" \"spot\" \"dot\"}))" "(= true (__ #{\"share\" \"hares\" \"shares\" \"hare\" \"are\"}))" "(= false (__ #{\"share\" \"hares\" \"hare\" \"are\"}))"], :description "A word chain consists of a set of words ordered so that each word differs by only one letter from the words directly before and after it.  The one letter difference can be either an insertion, a deletion, or a substitution.  Here is an example word chain:<br/><br/>cat -> cot -> coat -> oat -> hat -> hot -> hog -> dog<br/><br/>Write a function which takes a sequence of words, and returns true if they can be arranged into one continous word chain, and false if they cannot.", :tags ["hard" "seqs"]}

{:_id 83 :title "A Half-Truth" :tests ["(= false (__ false false))" "(= true (__ true false))" "(= false (__ true))" "(= true (__ false true false))" "(= false (__ true true true))" "(= true (__ true true true false))"], :description "Write a function which takes a variable number of booleans.  Your function should return true if some of the parameters are true, but not all of the parameters are true.  Otherwise your function should return false.", :tags ["easy"]}

{:_id 84 :title "Transitive Closure" :tests ["(let [divides #{[8 4] [9 3] [4 2] [27 9]}]\n  (= (__ divides) #{[4 2] [8 4] [8 2] [9 3] [27 9] [27 3]}))" "(let [more-legs\n      #{[\"cat\" \"man\"] [\"man\" \"snake\"] [\"spider\" \"cat\"]}]\n  (= (__ more-legs)\n     #{[\"cat\" \"man\"] [\"cat\" \"snake\"] [\"man\" \"snake\"]\n       [\"spider\" \"cat\"] [\"spider\" \"man\"] [\"spider\" \"snake\"]}))" "(let [progeny\n      #{[\"father\" \"son\"] [\"uncle\" \"cousin\"] [\"son\" \"grandson\"]}]\n  (= (__ progeny)\n     #{[\"father\" \"son\"] [\"father\" \"grandson\"]\n       [\"uncle\" \"cousin\"] [\"son\" \"grandson\"]}))"], :description "Write a function which generates the <a href=\"http://en.wikipedia.org/wiki/Transitive_closure\">transitive closure</a> of a <a href=\"http://en.wikipedia.org/wiki/Binary_relation\">binary relation</a>.  The relation will be represented as a set of 2 item vectors.", :tags ["hard" "set-theory"]}

{:_id 85 :title "Power Set" :tests ["(= (__ #{1 :a}) #{#{1 :a} #{:a} #{} #{1}})" "(= (__ #{}) #{#{}})" "(= (__ #{1 2 3})\n   #{#{} #{1} #{2} #{3} #{1 2} #{1 3} #{2 3} #{1 2 3}})" "(= (count (__ (into #{} (range 10)))) 1024)"], :description "Write a function which generates the <a href=\"http://en.wikipedia.org/wiki/Power_set\">power set</a> of a given set.  The power set of a set x is the set of all subsets of x, including the empty set and x itself.", :tags ["hard" "set-theory"]}

{:_id 86 :title "Happy numbers" :tests ["(= (__ 7) true)" "(= (__ 986543210) true)" "(= (__ 2) false)" "(= (__ 3) false)"], :description "Happy numbers are positive integers that follow a particular formula: take each individual digit, square it, and then sum the squares to get a new number. Repeat with the new number and eventually, you might get to a number whose squared sum is 1. This is a happy number. An unhappy number (or sad number) is one that loops endlessly. Write a function that determines if a number is happy or not.", :tags ["easy" "math"]}

{:_id 87 :title "Create an Equation" :tests ["(= (__ 3 4 7) '(= (+ 3 4) 7))" "(= (__ 3 4 12) '(= (* 3 4) 12))" "(= (__ 3 4 14) nil)" "(= (__ 3 4 5 35) '(= (* (+ 3 4) 5) 35))" "(= (__ 3 4 5 60) '(= (+ (* 3 4) 5) 60))" "(= (__ 3 4 5 23) '(= (+ 3 (* 4 5)) 23))" "(= (__ 3 4 5 27) '(= (* 3 (+ 4 5)) 27))" "(= (__ 3 4 5 6) nil)" "(= (__ 1 2 10 100 2001) '(= (+ 1 (* 2 10 100)) 2001)" "(= (__ 1 2 10 100 1300) '(= (* (+ 1 2 10) 100) 1300)"], :description "Write a function which takes three or more integers.  Using these integers, your function should generate clojure code representing an equation.  The following rules for the equation must be satisfied:\n\n    1. All integers must be used once and only once.\n    2. The order of the integers must be maintained when reading the equation left-to-right.\n    3. The only functions you may use are +, *, or =.\n    4. The equation must use the minimum number of parentheses.\n    5. If no satisfying equation exists, return nil.", :tags ["hard" "code-generation"]}

{:_id 88 :title "Symmetric Difference"
 :tests ["(= (__ #{1 2 3 4 5 6} #{1 3 5 7}) #{2 4 6 7})"
                 "(= (__ #{:a :b :c} #{}) #{:a :b :c})"
                 "(= (__ #{} #{4 5 6}) #{4 5 6})"
                 "(= (__ #{[1 2] [2 3]} #{[2 3] [3 4]}) #{[1 2] [3 4]})"]
 :description "Write a function which returns the symmetric difference of two sets. The symmetric difference is the set of items belonging to one but not both of the two sets."}

{:_id 89 :title "Graph Tour"
 :tests ["(= true (__ [[:a :b]]))"
	 "(= false (__ [[:a :a] [:b :b]]))"
	 "(= false (__ [[:a :b] [:a :b] [:a :c] [:c :a]
               [:a :d] [:b :d] [:c :d]]))"
	 "(= true (__ [[1 2] [2 3] [3 4] [4 1]]))"
	 "(= true (__ [[:a :b] [:a :c] [:c :b] [:a :e]
              [:b :e] [:a :d] [:b :d] [:c :e]
              [:d :e] [:c :f] [:d :f]]))"
	 "(= false (__ [[1 2] [2 3] [2 4] [2 5]]))"]}]
